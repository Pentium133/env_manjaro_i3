#! /usr/bin/env sh

source utils

function cb() {
  echo ''
}

function cb_on(){
  echo ''
}

function todo(){
  local task=$1
  local text=$2
  local id=$(short_id)
  echo "$(cb) [$task-$id] $text"
}

function todos(){
  local task
  local file
  local state=()

  for i in "$@"; do
    case $i in
      -t=*|--task=*)
        task="${i#*=}"
        shift
        ;;
      -c|--closed)
        state+=$(cb_on)
        shift
        ;;
      -o|--opened)
        state+=$(cb)
        shift
        ;;
      *)
        file="$i"
        shift
      ;;
    esac
  done

  if [ ${#state[@]} -eq 0 ]; then
    state=('' '')
  fi


  local pattern=$(mkstring $state -d='\|')
  if [[ -n $task  ]]; then
    pattern="\(${pattern}\)${anychar}\[${anychar}${task}${anychar}\]"
  fi

  find_line $file $pattern
}


function todo_add(){
  local file=$1
  local task=$2
  local text=$3
  local id=$(short_id)
  local fullid="$task-$id"
  local result="$(cb) [$fullid] $text"

  if newline_at_eof $file; then
    echo $result >> $file
  else
    echo -n $result >> $file
    echo "" >> $file
  fi

  echo $fullid
}

function collect_lines() {
  local IFS=$'\n\n' ret
  array_of_lines=($("$@"; ret=$?; echo .; exit $ret))
  ret=$?
  unset 'array_of_lines[-1]'
  return $ret
}

function todo_close(){
  local file=$1
  local task=$2

  local array_of_lines=("${(@f)$(todos $file -t=$task; echo .)}")
  unset 'array_of_lines[-1]'

  for e in $array_of_lines[@];do
    local result=$(replace $e $(cb) $(cb_on))
    
    replace_in_file $file $e $result
  done
}

function todo_open(){
  local file=$1
  local task=$2

  local array_of_lines=("${(@f)$(todos $file -t=$task; echo .)}")
  unset 'array_of_lines[-1]'

  for e in $array_of_lines[@];do
    local result=$(replace $e $(cb_on) $(cb))
    
    replace_in_file $file $e $result
  done
}
