#! /usr/bin/env sh

source utils

cb=''
cb_on=''
cont_left='`'
cont_right=$cont_left
child_level='·'

regex_state="$cb|$cb_on"
regex_level='·'
regex_left_brace='`'
regex_right_brace='`'
regex_identity="[-_a-zA-Z0-9]+"


##-- builders ---------------------------------------------------------------------------------------------------
function _make_path(){
  local group=$1
  local id=$2
  local result=$cont_left$group'|'$id$cont_right
  echo $result
}

function _make_todo(){
  local task=$1
  local text=$2
  local id=$(short_id)
  echo "$cb $(_make_path $task $id) $text"
}


##-- extractors -------------------------------------------------------------------------------------------------
function _extract_all(){
  local regex="^([$regex_level]{0,})\s*($regex_state)\s+~*$regex_left_brace($regex_identity)\|($regex_identity)$regex_right_brace\s+(.*)"

  local fields=("${(@f)$(extract_regex_groups $1 $regex; echo .)}")
  unset 'fields[-1]'

  local fields_length=${#fields[@]}

  if [[ $fields_length = 6 ]]; then
    
    fields=(
      ${fields[1]} 
      ' ' 
      ${fields[2]} 
      ${fields[3]} 
      ${fields[4]} 
      ${fields[5]} 
      ${fields[6]} 
    )
  
  fi

  for f in ${fields[@]}; do
    echo $f
  done
}

function _extract_level(){
  local fields=("${(@f)$(_extract_all $1; echo .)}")
  unset 'fields[-1]'

  echo ${fields[2]}
}

function _extract_body(){
  local regex="($regex_state)\s*(.*)$"

  local fields=("${(@f)$(extract_regex_groups $1 $regex; echo .)}")
  unset 'fields[-1]'

  local body=$(unwrap_line ${fields[3]} '~' '~')

  echo $body 
}

function _extract_state(){
  local fields=("${(@f)$(_extract_all $1; echo .)}")
  unset 'fields[-1]'

  echo ${fields[3]}
}

function _extract_group(){
  local fields=("${(@f)$(_extract_all $1; echo .)}")
  unset 'fields[-1]'

  echo ${fields[4]}
}

function _extract_id(){
  local fields=("${(@f)$(_extract_all $1; echo .)}")
  unset 'fields[-1]'

  echo ${fields[5]}
}

function _extract_path(){
  local group=$(_extract_group $1)
  local id=$(_extract_id $1)
  echo "${group}|${id}"
}

function _extract_text(){
  local fields=("${(@f)$(_extract_all $1; echo .)}")
  unset 'fields[-1]'

  echo ${fields[6]}
}

function _extract_parent_id(){
  local id=$1
  local regex="(.*)-[a-z0-9]+$"
  local fields=("${(@f)$(extract_regex_groups $1 $regex; echo .)}")
  unset 'fields[-1]'

  echo ${fields[2]}
}

function _extract_parent_ids(){
  local current_id=$1
  local ids=()

  while [ -n "$current_id" ]; do
    current_id=$(_extract_parent_id $current_id)
    local len=${#current_id}
    if [[ $len > 0 ]]; then
      echo $current_id
    fi
  done
}

##-- API --------------------------------------------------------------------------------------------------------
function find_by_id(){
  #local id=$1
  #local regex="${cont_left}$regex_identity\|($regex_identity)${cont_right}"
}

function find_subtree(){

}

function todos(){
  local task
  local file
  local state=()

  for i in "$@"; do
    case $i in
      -t=*|--task=*)
        task="${i#*=}"
        shift
        ;;
      -c|--closed)
        state+=$cb_on
        shift
        ;;
      -o|--opened)
        state+=$cb
        shift
        ;;
      *)
        file="$i"
        shift
      ;;
    esac
  done

  if [ ${#state[@]} -eq 0 ]; then
    state=($cb_on $cb)
  fi


  local regex_curr_state=$(mkstring $state -d='\|')
  local pattern
  if [[ -n $task  ]]; then
    pattern="\($regex_curr_state\)$regex_anychar$regex_left_brace$regex_anychar${task}$regex_anychar$regex_right_brace"
  fi

  find_line $file $pattern
}

function todo_state(){
  local file
  local task
  local striked=0
  
  for i in "$@"; do
    case $i in
      -t=*|--task=*)
        task="${i#*=}"
        shift
        ;;
      -c|--closed)
        striked=1
        shift
        ;;
      -o|--opened)
        striked=0
        shift
        ;;
      *)
        file="$i"
        shift
      ;;
    esac
  done

  local array_of_lines=("${(@f)$(todos $file -t=$task; echo .)}")
  unset 'array_of_lines[-1]'


  for e in $array_of_lines[@];do
    local level=$(_extract_level $e)
    local state=$(_extract_state $e)
    local body=$(_extract_body $e)

    if [[ $level = ' ' ]]; then
      level=''
    fi

    if [[ $striked = 1 ]]; then
      local result="${level}${cb_on} ~~${body}~~"
      
    else
      local result="${level}${cb} ${body}"
    fi

    
    replace_in_file $file $e $result
  done
}

function todo_add(){
  local file=$1
  local group=$2
  local text=$3
  local id=$(short_id)
  local full_id=$(_make_path $group $id)
  local result="$cb $full_id $text"

  if newline_at_eof $file; then
    echo $result >> $file
  else
    echo -n $result >> $file
    echo "" >> $file
  fi

  echo $id
}

function todo_add_child(){
  local file=$1
  local task=$2
  local text=$3

  local arr=("${(@f)$(todos $file -t=$task; echo .)}")
  unset 'arr[-1]'
  local line=${arr[1]}
  local parent_level=$(_extract_level $line)
  local parent_group=$(_extract_group $line)
  local parent_id=$(_extract_id $line)
  local id="${parent_id}-$(short_id)"
  local full_id=$(_make_path $parent_group $id)

  if [[ $parent_level = ' ' ]]; then
    parent_level=''
  fi

  local child="${line}\n${parent_level}·· $cb $full_id $text"
  

  replace_in_file $file $line $child

  echo $id
}


